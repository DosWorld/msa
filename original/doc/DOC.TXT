

                MSA2 1.0 (BUILD 13)
                -=-=-=-=-=-=-=-=-=-
       Copyright(C) 2000 - 2019 Robert Ostling (robost86@hotmail.com)
       Copyright(C) 2019 DosWord (dosworld@tutanota.com)
                -=-=-=-=-=-=-=-=-=-



                Copyright
                -=-=-=-=-

        Licensed under MIT license. See LICENSE file.


                Bugs?
                -=-=-

        When this package is released, there are no known bugs. If
        you discover a bug, or just want to come with a suggestion or
        a comment, just e-mail me (dosworld@tutanota.com).


                What's MSA?
                -=-=-=-=-=-

        MSA2 is a old free x86 assembler. It supports all 8086
        instructions and most of the 80186/80286 instructions. It
        supports formats:

           * flat binary output -fbin
           * .com file -fcom
           * .exe file with tiny memory model -ftexe.
           * .ovl overlay file with tiny memory model -fovl (this
             is the same as texe, but with symbol table).

        Initialy written by a 14-year old Swedish programmer (that's
        why my english isn't very good)-:

        MSA2 is pretty fast, and the only file you'll need to build
        a program is MSA2.EXE (35 KB). It runs fine on my old 286.
        MSA2 does not require DPMI.

        I wrote MSA2 in C, using Borland C++ 2.0, but I don't think
        it should be very hard to port to another compiler. The
        source code is not commented, not structured, so, it may
        be a little hard to read... Now, MSA2 is ported to Watcom C.

        I have not tested MSA2 in FreeDOS yet, but there should not
        be any difference between running MSA2 in a DOS box, real-mode
        MS-DOS or FreeDOS.


                System Requirements  :-)
                -=-=-=-=-=-=-=-=-=-  -=-

        MSA2 had been tested on the following computer, and it runs
       just fine.

                Toshiba 3100
                ============

                CPU:    80286
                RAM:    640 KB
                HD:     10 MB
                OS:     Toshiba DOS 5.0
                Screen: Small B/W plasma screen

        Your HD will not be filled just by installing MSA2...

                168 KB (full installation)
                35 KB (minimum installation)

                Using MSA
                -=-=-=-=-

        MSA2 is a command-line program, use your favourite editor to
        edit the source files. Here are a more detailed description
        of the different command-line options MSA2 supports. (These
        command-line options are case insensitive, like the rest of
        MSA2.


        =============================================================

                -o              - Set output file

        Use: -ofile.com, -odisk.bin

        There can only be one output file per compile, if more than
        one output files are present, the last one will be used. If
        no output file is present, you'll see the built-in help screen.

        =============================================================

                -s              - Set starting point

        Use: -s0, -s0x7c00

        This is an optional command, if you don't use this option,
        the standard DOS .COM starting point (0x100) is used.

        =============================================================

                -b              - Set buffer size

        Use: -b0x400, -b0x100

        This option changes the size of the output buffer kept in
        memory. Should be a value between 0x100 (256) and 0x4000
        (16 KB).

        =============================================================

                -m              - Set output level

        Use: -m0, -m1, -m2

        m0 means: "only report errors"
        m1 means: "only report errors and serious warnings"
        m2 means: "report all"


        =============================================================

                -f              - Set destination format

        Use: -fbin, -fcom, -ftexe, -fovl

        fbin means:  raw binary
        fcom means:  DOS .com file
        ftexe means: DOS .exe file with tiny memory model
        fovl means: the same as texe but with symbol table at end

        All other commands, not beginning with '-' will be assumed
        to be input files.



                The syntax of MSA
                -=-=-=-=-=-=-=-=-

        MSA:s syntax is similar to the syntax of NASM. I think every
        documented feature of MSA2 is supported by NASM, but this does
        _not_ mean that a NASM program always can be assebled by MSA2.
        For example, MSA2 has no 32-bit support and macros.

        Constants
        =========

        There are two ways of declaring constants in MSA2.

        1.      ident   EQU     value
        2.      CONST   ident   value

        I recommend the first way, for compatibility with NASM.
        A constant value may use following operators:
                '+', '-', '*', '/' and '%'
        But NOT:
                '(' and ')'

        You may also use following constants:
                $ and $$

        $ is the offset, $$ is the starting point

        You may only define integer constants, NOT floating point
        or string constants.

        Examples of valid constants:

        data_start      EQU     $+0x100
        my_sweet        EQU     0x4*0x13
        lord            EQU     $$-0x80
        color           EQU     0b1011

        Labels, DB, DW and DD
        =====================


        In MSA, you define labels in the same way as you do in all
        programming languages,

label:

        where 'label' is the name of your label. There is another way to
        define a label, only used with DB, DW and DD. This command:

fname:  DB      "filename.dat",0
idword: DW      0x51a0


        DB can be used to declare strings and 8-bit values:

my_db:  DB      "this is a string",1,2,3,0x10,0x20,0x30,14%3


        DW is used only to declare 16-bit variables:

my_dw:  DW      0x2314,0x5214,0x5382,0x0000,4,1,6


        DD is used only to declare 32-bit variables:

my_dd:  DD      0x23a36b14,0x552814,0x5ba4382,0x1000000,4,51,6


        Comments
        ========

        Ordninary assembler comments, one-line comments beginning with
        ';', are the only valid comments in MSA2.


        Space
        =====

        NASM will assemble this

        mov     ax, 3
        cmp     al, 2

        , but MSA2 says 'Syntax error'. Spaces aren't allowed everywhere
        in MSA2. Not within identifiers, or between operands (like in the
        example above). Use this instead:

        mov     ax,3
        cmp     al,2


        Opcodes
        =======

        If you want to use the short opcodes for the 1-step
        bit shift/rotation instructions, you'll have to type:

        shl1    ax
        ror1    bl
        ...


                23:55 14 Nov 2019
                -=-=-=-=-=-=-=-=-
                 End of document
